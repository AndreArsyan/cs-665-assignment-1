@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": true,
    "cutInterfaceStructures": true,
    "cutDataStructures": true,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 3,
    "backwardDepth": 3,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "ForwardOnly" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "edu.bu.met.cs665.Main",
  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_3155 { 
   	label=bu
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   subgraph cluster_1379780159 { 
   	label=met
	labeljust=l
	fillcolor="#d8d8d8"
	style=filled
   
   Americano443379174[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Americano</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Beverage443379174[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Beverage</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   CONDIMENT_PRICE: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   milk: Milk [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   name: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   price: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   sugar: Sugar [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ AddMilk()</TD></TR>
<TR><TD ALIGN="LEFT" >+ AddSugar()</TD></TR>
<TR><TD ALIGN="LEFT" >+ Get()</TD></TR>
<TR><TD ALIGN="LEFT" >+ GetMilk(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ GetPrice(): double</TD></TR>
<TR><TD ALIGN="LEFT" >+ GetSugar(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ RemoveMilk()</TD></TR>
<TR><TD ALIGN="LEFT" >+ RemoveSugar()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

BlackTea443379174[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)BlackTea</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Coffee443379174[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Coffee</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Espresso443379174[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Espresso</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

GreenTea443379174[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)GreenTea</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Latte443379174[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Latte</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Main2069339088[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Main</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ main(args: String[])</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Milk443379174[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Milk</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   unit: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ Add()</TD></TR>
<TR><TD ALIGN="LEFT" >+ Get(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ Remove()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Sugar443379174[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Sugar</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   unit: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ Add()</TD></TR>
<TR><TD ALIGN="LEFT" >+ Get(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ Remove()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Tea443379174[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Tea</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

YellowTea443379174[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)YellowTea</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 
} 

'edges    
Beverage443379174 -> Coffee443379174[arrowhead=none, arrowtail=empty, dir=both];
Beverage443379174 -> Milk443379174[label="milk
[0..1]"];
Beverage443379174 -> Sugar443379174[label="sugar
[0..1]"];
Beverage443379174 -> Tea443379174[arrowhead=none, arrowtail=empty, dir=both];
Coffee443379174 -> Americano443379174[arrowhead=none, arrowtail=empty, dir=both];
Coffee443379174 -> Espresso443379174[arrowhead=none, arrowtail=empty, dir=both];
Coffee443379174 -> Latte443379174[arrowhead=none, arrowtail=empty, dir=both];
Tea443379174 -> BlackTea443379174[arrowhead=none, arrowtail=empty, dir=both];
Tea443379174 -> GreenTea443379174[arrowhead=none, arrowtail=empty, dir=both];
Tea443379174 -> YellowTea443379174[arrowhead=none, arrowtail=empty, dir=both];
    
}
@enduml